# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lon': 'float',
        'lat': 'float'
    }

    attribute_map = {
        'lon': 'lon',
        'lat': 'lat'
    }

    def __init__(self, lon=None, lat=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501

        self._lon = None
        self._lat = None
        self.discriminator = None

        if lon is not None:
            self.lon = lon
        if lat is not None:
            self.lat = lat

    @property
    def lon(self):
        """Gets the lon of this Location.  # noqa: E501

        longitude  # noqa: E501

        :return: The lon of this Location.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Location.

        longitude  # noqa: E501

        :param lon: The lon of this Location.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def lat(self):
        """Gets the lat of this Location.  # noqa: E501

        latitude  # noqa: E501

        :return: The lat of this Location.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.

        latitude  # noqa: E501

        :param lat: The lat of this Location.  # noqa: E501
        :type: float
        """

        self._lat = lat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
